
=== Type inference

TODO

// Every sourced function in `morloc` must be given a general type signature. These
// are usually the only type annotations that are needed in a `morloc`
// program. Types of all other expressions in the program can be inferred. But this
// type inference gives us only the general types of all expressions. In order to
// generate code and properly (de)serialize when needed, we must know the
// language-specific type of every expression. The transformation from general type
// to concrete type is performed with user provided type functions. For example:
//
// [source, morloc]
// ----
// type Cpp => Map a b = "std::map<$1,$2>" a b
// type Cpp => Tuple2 a b = "std::tuple<$1,$2>" a b
// type Cpp => List a = "std::vector<$1>" a
// type Cpp => Int = "int"
// type Cpp => Str = "std::string"
//
// source Cpp from "foo.hpp" ("listToMap", "strLen", "map")
//
// listToMap a b :: [(a,b)] -> Map a b
// strLen :: Str -> Int
// map a b :: (a -> b) -> [a] -> [b]
//
// makeLengthMap xs = listToMap . map (\x -> (x, strLen x))
// ----
//
// The sourced function `listToMap`, `strLen`, and `map` all require general type
// signatures. From these general type signatures, the type of every sub-expression
// in `makeLengthMap` can be inferred, so this function does not need a type
// signature. Its type is: `[Str] -> Map Str Int`.
//
// There are currently a small number of special types in `morloc`. Among these are
// the primitives `Int`, `Real`, `Bool`, `Str`, and `Unit`. The `Int` is an integer
// of unlimited size. The `Real` is a float of unlimited precision and
// width. These two types correspond to the integers and reals that are allowed in
// JSON. The `Str` is currently limited to ASCII. The reason for this is partly my
// bias from scientific computing, where ASCII is usually all we need (there are no
// umlauts in DNA sequence). I will extend support eventually. The `Unit` type
// corresponds to the JSON `null`. The other special types are `List` and `TupleX`,
// where `X` is any integer greater than 2.
//
// The `Int` and `Real` types can be thought of as mathematical ideals. In
// contrast, the `C++` `int` and `double` types are more limited. When the
// deviations from the ideal integer and real numbers matter, more specific general
// types may be created, such as `BigInt`, `Int32`, or `Float64` types, for
// integers of unlimited size, 32 bits intgers, or 64 bit floats, respectively.
//
// The `Map` type, is not special in `morloc`. To define a new type, either `Map`
// or `BigInt`, you have to tell `morloc` how the type can be broken down into
// simpler components. How this is done is described in the next section.


=== Serialization

TODO

// `morloc` 's current interoperability paradigm is based entirely on
// serialization. Serialization is not a fundamental requirement of `morloc`. JSON
// serialization could be replaced with machine-level interoperability for a pair
// of languages. This change would only affect performance, requiring no new code
// on the part of the programmer, since all interop is handled by the compiler.
//
// Data types that have an unambiguous mapping to the JSON data model can be
// automatically serialized without any extra boilerplate. The JSON data model
// follows this grammar:
//
// ```
// json : number
//      | bool
//      | string
//      | null
//      | [json]
//      | {key1 : json, key1 : json, ...}
// ```
//
// Types that are compositions of primitives and containers can be automatically
// serialized. This includes records and the subset of objects for which arguments
// passed to the constructor are assigned to accessible fields. For other types, an
// (un)packing function that simplifies the data is required. For example, take the
// general type `Map a b`, which maps keys of type `a` to values of type `b`. In a
// given language, the `Map` type may be implemented as a hash table, a tree, pair
// lists, or even a connection to a database. The types `a` and `b` do not give
// enough information to serialize the object. Therefore, the user must provide an
// unpack function which could be `Map a b -> ([a],[b])` or `Map a b -> [(a,b)]`.
// The pack function works in the opposite direction. These functions are
// provided in an instance of the `Packable` type class, for example:
//
//
// [source, morloc]
// ----
// module map (Map)
//
// type Cpp => Map a b = "std::map<$1,$2>" a b
//
// class Packable a b where
//   pack a b :: a -> b
//   unpack a b :: b -> a
//
// instance Packable ([a],[b])  (Map a b) where
//   source Cpp "map.hpp" ("packMap" as pack, "unpackMap" as pack)
// ----
//
//
// Note that the unpack function `Map a b -> ([a],[b])` may not take us all the way
// to a serializable form since `a` and `b` may be arbitrarily complex
// objects. This is fine, `morloc` will recursively handle (de)serialization all
// the way down.
