== `morloc` workflow

<<fig:overview, The figure below>> outlines the 6 levels of the `morloc`
workflow.

Most of the framework below is not yet implemented. For now, `morloc` can be
run as a functional programming language that imports foreign functions
(Python3, R and {cpp}), performs type checking and generates an executable. The
current type system supports generic and parameterized types; a more expressive
system is under development. 

[#fig:overview]
image:overview.svg[]

 . The *creation* level. The programmer creates their functions just as they
 would without `morloc`. New functions and libraries can be written using
 idiomatic syntax. The code is maintained in the programmer's favorite version
 control platform (e.g. github) and maintained following whatever conventions
 are standard for the given language. That is, the programmer does usually not
 need to change anything in order to integrate with `morloc`.

 . The *semantic* level. Each function in the library is given a type
 annotation (perhaps automatically). The type annotation may be as simple as
 `Int -> Int`, just like a C prototype. Simple type signatures like this may be
 inferred automatically from the source code if the guest language is typed.
 Far more expressive types can also be used.

 . The *curation* level. Once types are assigned to the functions, they can be
 uploaded to the `morlocIO` repository. Here they can be benchmarked against
 related functions (even across languages), documented, discussed, and
 organized into rich modules. Entire workflows, compositions of many `morloc`
 functions, can be uploaded as well (see next level). Stats for how functions
 are used can be maintained. They can be plugged into cross-language test
 suites. Functions and libraries that are reliable will gain "stars". Community
 knowledge about how these functions are used will be collected to allow deeper
 automated reasoning.

 . The *integration* level. All the libraries can be queried using powerful
 semantic query languages, such as SPARQL. Functions can be imported into
 `morloc` scripts and composed into new programs. These new programs can then
 be uploaded to `morlocIO` or built into new programs. The function type signatures, along with access to the `morlocIO` knowledgebase and
 any local knowledgebases, will allow parameter optimization, performance optimization, runtime modeling, or inference of the optimal sequence of functions
 to achieve a given end. 

 . The *build* level. Workflows can be compiled into local executables,
 graphical user interface wrappers, or scalable workflows (e.g. using the
 Common Workflow Language). The compiler, armed with a powerful reasoner and
 deep knowledge about the system, can figure out how to integrate the functions
 across languages and embed them in code for handling error, caching data, and
 scaling.

 . The *execution* level. Depending on the build configuration, the resulting
 program may be run locally, uploaded to a cloud computing framework (e.g.
 arvados using CWL), shared with users as a GUI (e.g. an automatically
 generated Shiny app), or imported into MorlocStudio.
