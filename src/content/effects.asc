
=== Effect handling - monads, algebraic effects, and nothing

We could use monads to describe different effects

[source,haskell]
----
read :: Filename -> IO Text

write :: Filename -> Text -> IO ()

writeErr :: Text -> IO ()

modifyText :: Text -> Either Text Text

main infile outfile = do
  f <- read infile
  case modifyText f of
    Left err -> writeError err 
    Right f' -> write outfile f'
----


We could ignore effects and just "let it be"

[source,haskell]
----
read :: Filename -> Text

write :: Filename -> Text -> ()

modifyText :: Text -> Text

main i o = write o . modifyText . read i
----

Or we could use algebraic effects. approach has been explored in the Koka
language cite:[Leijen_2014].

[source,haskell]
----
read :: Filename -> Text +IO

write :: Filename -> Text -> () +IO

modifyText :: Text -> Text +Err

main i o = write o . modifyText . read i
----

Here effects are added to functions with the `+EFFECT` syntax. Some languages
will be able to enforce the contracts, some will not. We get composability back
and monadic concepts from Haskell don't leak into other languages.
Implementations signatures would not have to specify effects.

The effect annotations are only specified explicitly in the signatures for
functions that perform the effect. And these effects may be implemented only
for certain implementations. For example:

[source,haskell]
----
add :: Int -> Int
add Hask :: "Integer" -> "Integer"
add Cpp : "int" -> "int" +Exn
----

Here the ideal add function will never go wrong, the Hask add function with
integers of arbitrary length will never go wrong unless memory runs out (and we
don't model that sort of error), but the C++ add *can* go wrong due to
overflows since the type is bound.

Some functions have intrinsic effects, which will be written in the ideal type,
such as `read` and `write` IO functions. Implementations are free to impose
effects as well. So different realizations of a given ideal composition may
have different effects.

This system is not mutually exclusive with monadic error handling. For example:

[source,haskell]
----
head    a :: [a] -> a +Exn
headMay a :: [a] -> Maybe a
----
