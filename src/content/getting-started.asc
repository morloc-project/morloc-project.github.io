
=== Install the compiler

The easiest way to start using `morloc` is through containers. I recommend using
podman, since it doesn't require a daemon or sudo access. But Docker,
Singularity, and other container engines are fine as well.

An image with the morloc executable and batteries included can be retrieved
from the GitHub container registry as follows:

[source, bash]
----
$ podman pull ghcr.io/morloc-project/morloc/morloc-full:0.53.7
----

The `v0.53.7` may be replaced with the desired `morloc` version.

Now you can enter a shell with a full working installation of `morloc`:

[source, bash]
----
$ podman run --shm-size=4g \
             -v $HOME:$HOME \
             -w $PWD \
             -e HOME=$HOME \
             -it ghcr.io/morloc-project/morloc/morloc-full:0.53.7 \
             /bin/bash
----

The `--shm-size=4g` option sets the shared memory space to 4GB. `morloc` uses
shared memory for communication between languages, but containers often limit
the shared memory space to 64MB by default.

Alternatively, you can set up a script to run commands in a `morloc` environment:

[source, bash]
----
podman run --rm \
           --shm-size=4g \
           -e HOME=$HOME \
           -v $HOME/.morloc:$HOME/.morloc \
           -v $PWD:$HOME \
           -w $HOME \
           ghcr.io/morloc-project/morloc/morloc-full:0.53.7 "$@"
----

Name this script `menv`, for "morloc environment", make it executable, and place
it in your PATH. The script will mount your current working directory and your
`morloc` home directory, allowing you to run commands in a morloc-compatible
environment.

You can can run commands like so:

[source, bash]
----
$ menv morloc --version      # get the current morloc version
$ menv morloc -h             # list morloc commands
$ menv morloc init -f        # setup the morloc environment
$ menv morloc install types  # install a morloc module
$ menv morloc make foo.loc   # compile a local morloc module
----

The generated executables may not work on your system since they were compiled
inside the container, but you can run them in the container environemtn as well:

[source, bash]
----
$ menv ./nexus foo 1 2 3
----

More advanced solutions with richer dependency handling will be introduced in
the future, but for now this allows easy experimentation with the language in a
safe(ish) sandbox.

The `menv morloc` or `menv ./nexus` syntax is a bit verbose, but I'll let you
play with alternative aliases. The conventions here are still fluid. Let me know
if you find something better and or if you find bugs in this approach.


=== Say hello

The inevitable "Hello World" case is implemented in `morloc` like so:

[source, morloc]
----
module main (hello)
hello = "Hello up there"
----

The module named `main` exports the term `hello` which is assigned to a literal
string value.

Paste code this into a file (e.g. "hello.loc") and then it can be imported by
other `morloc` modules or directly compiled into a program where every exported
term is a subcommand.

[source, shell]
----
morloc make hello.loc
----

This command will produce two files: a C program, `nexus.c`, and its compiled
binary, `nexus`. The `nexus` is the command line user interface to the commands
exported from the module.

Calling `nexus` with no arguments or with the `-h` flag, will print a help
message:

[source, shell]
----
$ ./nexus -h
The following commands are exported:
  hello
    return: Str
----

The command is called as so:

[source, shell]
----
$ ./nexus hello
Hello up there
----


=== Compose functions across languages

In `morloc`, you can import functions from many languages and compose them under
a common type system. The syntax for importing functions from source files is as
follows:

[source]
----
source Cpp from "foo.hpp" ("map", "sum", "snd")
source Py from "foo.py" ("map", "sum", "snd")
----

This brings the functions `map`, `sum`, and `snd` into scope in the `morloc`
script. Each of these functions must be defined in the C++ and Python
scripts. For Python, since `map` and `sum` are builtins, only `snd` needs to be
defined. So the `foo.py` function only requires the following two lines:

[source,python]
----
def snd(pair):
    return pair
----

The C++ file, `foo.hpp`, may be implemented as a simple header file with generic
implementations of the three required functions.

[source,C++]
----
#pragma once
#include <vector>
#include <tuple>

// map :: (a -> b) -> [a] -> [b]
template <typename A, typename B, typename F>
std::vector<B> map(F f, const std::vector<A>& xs) {
    std::vector<B> result;
    result.reserve(xs.size());
    for (const auto& x : xs) {
        result.push_back(f(x));
    }
    return result;
}

// snd :: (a, b) -> b
template <typename A, typename B>
B snd(const std::tuple<A, B>& p) {
    return std::get<1>(p);
}

// sum :: [a] -> a
template <typename A>
A sum(const std::vector<A>& xs) {
    A total = A{0};
    for (const auto& x : xs) {
        total += x;
    }
    return total;
}
----

Note that these implementations are completely independent of `morloc` --- they
have no special constraints, they operate on perfectly normal native data
structures, and their usage is not limited to the `morloc` ecosystem. The
`morloc` compiler is responsible for mapping data between the languages. But to
do this, `morloc` needs a little information about the function types. This is
provided by the general type signatures, like so:

[source]
----
map a b :: (a -> b) -> [a] -> [b]
snd a b :: (a, b) -> b
sum :: [Real] -> Real
----

The syntax for these type signatures is inspired by Haskell, with the exception
that generic terms (`a` and `b` here) must be declared on the left. Square
brackets represent homogenous lists and parenthesized, comma-separated values
represent tuples, and arrows represent functions. In the `map` type, `(a -> b)`
is a function from generic value `a` to generic value `b`;  `[a]` is the input
list of initial values; `[b]` is the output list of transformed values. 

Removing the syntactic sugar for lists and tuples, the signatures may be written
as:

[source]
----
map a b :: (a -> b) -> List a -> List b
snd a b :: Tuple2 a b -> b
sum :: List Real -> Real
----

These signatures provide the *general* types of the functions. But one general
type may map to multiple *native*, language-specific types. So we need to
provide an explicit mapping from general to native types.

[source]
----
type Cpp => List a = "std::vector<$1>" a
type Cpp => Tuple2 a b = "std::tuple<$1,$2>" a b
type Cpp => Real = "double"
type Py => List a = "list" a
type Py => Tuple2 a b = "tuple" a b
type Py => Real = "float"
----

These type functions guide the synthesis of native types from general
types. Take the C++ mapping for `List a` as an example. The basic C++ list type
is `vector` from the standard template library. After the `morloc` typechecker
has solved for the type of the generic parameter `a`, and recursively converted
it to `C++`, its type will be substituted for `$1`. So if `a` is inferred to be
a `Real`, it will map to the C++ `double`, and then be substituted into the list
type yielding `std::vector<double>`. This type will be used in the generated C++
code.

Functions can be composed:

[source]
----
sumSnd xs = sum (map snd xs)
----

These `morloc` compositions will be internally rewritten in terms of the native
imported functions, for example:

[source]
----
\xs -> sum (map snd xs)
----

So in the final form, all functions in `morloc` are imported from foreign languages.

`morloc` also supports partial application, eta reduction, and the dot-operator
for composition. So `sumSnd` can be simplified to:

[source]
----
sumSnd = sum . map snd
----

But what code is generated from this? Remember, we imported functions in Pythong
*and* C++ for each of the three native functions above. This problem is
addressed in the next section.

=== One term may have many definitions

`morloc` supports a kind of *language* or *implementation* polymorphism. Each
term may have many definitions. For example, the function `mean` has three
definitions below:

[source]
----
import base (sum, div, size, fold, add)
import types
source Cpp from "mean.hpp" ("mean")
mean :: [Real] -> Real
mean xs = div (sum xs) (size xs)
mean xs = div (fold 0 add xs) (size xs)
----

`mean` is sourced directly from `C++`, it is defined in terms of the `sum`
function, and it is defined more generally with `sum` written as a fold
operation. The `morloc` compiler is responsible for deciding which
implementation to use.

The equals operator in `morloc` indicates functional substitutability. When you
say a term is "equal" to something, you are giving the compiler an option for
what may be substituted for the term. The function `mean`, for example, has many
functionally equivalent definitions. They may be in different languages, or they
may be more optimal in different situations.

Now this ability to simply state that two things are the same can be abused. The
following statement is syntactically allowed in `morloc`:

[source]
----
x = 1
x = 2
----

What is `x` after this code is run? It is 1 *or* 2. The latter definition does
not mask the former, it *appends* the former. Now in this case, the two values
are certainly not substitutable. `morloc` has a simple *value checker* that will
catch this type of primitive contradition. However, the value checker cannot yet
catch more nuanced errors, such as:

[source]
----
x = div 1 (add 1 1)
x = div 2 1
----

In this case, the type checker cannot check whithin the implementation of `add`,
so it cannot know that there is a contradiction. For this reason, some care is
needed in making these definitions.

=== Overload terms with typeclasses

In addition to language polymorphism, `morloc` offers more traditional ad hoc
polymorphism over types. Here typeclasses may be defined and type-specific
instances may be given. This idea is similar to typeclasses in Haskell, traits
in Rust, interfaces in Java, and concepts in `C++`.

In the example below, `Addable` and `Foldable` classes are defined and used to
create a polymorphic `sum` function.

[source]
----
class Addable a where
    zero a :: a
    add a :: a -> a -> a

instance Addable Int where
    source Py "arithmetic.py" ("add")
    source Cpp "arithmetic.hpp" ("add")
    zero = 0

instance Addable Real where
    source Py "arithmetic.py" ("add")
    source Cpp "arithmetic.hpp" ("add")
    zero = 0.0

class Foldable f where
    foldr a b :: (a -> b -> b) -> b -> f a -> b

instance Foldable List where
    source Py "foldable.py" ("foldr")
    source Cpp "foldable.hpp" ("foldr")

sum = foldr add zero
----

The instances may import implementations for many languages.

The native functions may themselves be polymorphic, so the imported
implementations may be repeated across many instances. For example, the Python
`add` may be written as:

[source,python]
----
def add(x, y):
    return x + y
----

And the C++ add as:

[source,cpp]
----
template <class A>
A add(A x, A y){
    return x + y;
}
----


=== Pass types between languages

Up to now we have ignored the method `morloc` uses to allow communication
between languages. We've simply asserted that there was a "common type
system". We'll now give a quick peak into how all this works (finer details will
be reserved for technical sections later on).

Every `morloc` general type maps unambiguously to a binary form that consists of
several fixed-width literal types, a list container, and a tuple container. The
literal types include a unit type, a boolean, signed integers (8, 16, 32, and 64
bit), unsigned integers (8, 16, 32, and 64 bit), and IEEE floats (32 and 64 bit). The
list container is represented by a 64-bit size integer and a pointer to an
unboxed vector. The tuple is represented as a set of values in contiguous
memory.

Here is an example of how the type `([UInt8], Bool)`, with the value `([3,4,5],True)`,  might be laid out in memory:

[source]
---
03 00 00 00 00 00 00 00 00 -- first tuple element, specifies list length (little-endian)
30 00 00 00 00 00 00 00 00 -- first tuple element, pointer to list
01 00 00 00 00 00 00 00 00 -- second tuple element, with 0-padding
03 04 05                   -- 8-bit values of 3, 4, and 5
---

Records are represented as tuples. The names for each field are stored only in
the type schemas. `morloc` also supports tables, which are just records where
the field types correspond to the column types and where fields are all
equal-length lists. Records and tables may be defined as shown below:

[source]
----
record Person = Person { name :: Str, age :: UInt8 }
table People = People { name :: Str, age :: Int }

alice = { name = "Alice", age = 27 }
students = { name = ["Alice", "Bob"], age = [27, 25] }
----

The `morloc` type signatures can be translated to schema strings that may be
parsed by a foundational `morloc` C library into a type structure. Every
supported language in the `morloc` ecosystem must provide a library that wraps
this `morloc` C library and translates to/from `morloc` binary given the
`morloc` type schema.

By itself, this system allows any type that is comprised entirely of literals,
lists, and tuples to be translated between languages. But what about types that
do not break down cleanly into these forms? For example, consider the
parameterized `Map k v` type that represents a collection with keys of generic
type `k` and values of generic type `v`. This type may have many
representations, including a list of pairs, a pair of columns, a binary tree,
and a hashmap. In order for `morloc` to know how to convert all `Map` types in
all languages to one form, it must know how to express `Map` type in terms of
more primitive types. The user can provide this information by defining
instances of the `Packable` typeclass for `Map`. This typeclass defines two
functions, `pack` and `unpack`, that construct and deconstruct a complex type.

[source]
----
class Packable a b where
    pack a b :: a -> b
    unpack a b :: b -> a
----

The `Map` type for Python and C++ may be defined as follows:

[source]
----
type Py => Map key val = "dict" key val
type Cpp => Map key val = "std::map<$1,$2>" key val
instance Packable ([a],[b]) (Map a b) where
    source Cpp from "map-packing.hpp" ("pack", "unpack")
    source Py from "map-packing.py" ("pack", "unpack")
----

The `morloc` user never needs to directly apply the `pack` and `unpack`
functions. Rather, these are used by the compiler within the generated code. The
compiler constructs a serialization tree from the general type and from this
trees generates the native code needed to (un)pack types recursively until only
primitive types remain. These may then be directly translated to `morloc` binary
using the language-specific binding libraries.

In some cases, the native type may not be as generic as the general type. Or you
may want to add specialized (un)packers. In such cases, you can define more
specialized instances of `Packable`. For example, if the `R` `Map` type is
defined as an `R` list, then keys can only be strings. Any other type should
raise an error. So we can write:

[source]
----
type R => Map key val = "list" key val
instance Packable ([Str],[b]) (Map Str b) where
source R from "map-packing.R" ("pack", "unpack")
----

Now whenever the key generic type of `Map` is inferred to be anything other than
a string, all R implementations will be pruned.

=== A longer example

Here is an example showing a parallel map function written in Python that calls C++ functions.

[source]
----
module m (sumOfSums)

import types (List, Real)

source Py from "foo.py" ("pmap")
source Cpp from "foo.hpp" ("sum")

pmap a b :: (a -> b) -> [a] -> [b] 
sum :: [Real] -> Real

sumOfSums = sum . pmap sum 
----

This `morloc` script exports a function that sums a list of lists of real
numbers. The sum function is implemented in `C++`:

[source, C++]
----
#pragma one
#include <vector>

double sum(const std::vector<double>& vec) {
    double sum = 0.0;
    for (double value : vec) {
        sum += value;
    }
    return sum;
}
----

The parallel `pmap` function is written in Python:

[source, python]
----
import multiprocessing as mp

def pmap(f, xs):
    with mp.Pool() as pool:
        results = pool.map(f, xs)
    return results
----

`morloc` the inner summation jobs will be run in parallel. The `pmap` function
has the same signature as the non-parallel `map` function, so can serve as a
drop-in replacement.
