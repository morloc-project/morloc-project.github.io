
=== I only use one language, is Morloc still useful?

Yes, Morloc remains useful even if you only use one programming language.

While Morloc is designed to allow polyglot development, its core benefits also
apply to single-language projects. In the Morloc ecosystem, you may continue
working in your preferred language, but focus shifts to writing libraries
instead of standalone applications.

Morloc lets you compose these functions and automatically generate applications
from them, offering several advantages:

 - *Broader usability*: Your functions can be easily reused and easily accessed
   by other language communities.

 - *Improved testing and benchmarking*: Functions can be integrated into
   language-agnostic testing and benchmarking frameworks.

 - *Future-proofing*: If you ever need to migrate to a new language, Morloc’s
   type annotations and documentation carry over—only the implementation needs
   to change.

 - *Better workflows*: Especially in fields like bioinformatics, Morloc shifts
   workflows from chaining applications and files to composing typed functions
   and native data structures, making pipelines more robust and easier to
   validate.

 - *No more format parsing*: Morloc data structures replace bespoke file formats
   and offer efficient serialization.

Morloc’s goal isn’t to force polyglot programming, but to encourage modular,
library-centric development. Most users will still work in their language of
choice, but gain the ability to compose, share, and extend functionality more
easily. Even if you never mix languages, Morloc provides a strong framework for
building, composing, and maintaining robust software in your chosen language.

// === Can Morloc really match hand crafted CLIs?
//
// Currently the CLIs Morloc generates are pretty sparse. But soon Morloc will
// support adding additional function and module documentation that will propagate
// to the CLI. Further, configu

=== Is this just a bioinformatics workflow language?

No. The Morloc paper
https://www.zebulun-arendsee.com/images/morloc-paper-001.pdf[pre-released here],
is focused on bioinformatics applications. As discussed at length in the paper,
Morloc addresses systematic flaws in the traditional approaches to building
bioinformatics workflows. Given the need, and also given my personal background,
bioinformatics is a good place to start. However, Morloc can be more broadly
applied to any functional problem.

=== Do you really want to deprecate all the bioinformatics formats?

Yes, with the possible exception of a specialized binary formats which may offer
performance benefits.

For human-readable semi-structured formats, I think only two are necessary. A
tabular format (e.g., CSV) and a tree format (e.g., JSON).

=== Do you really want to deprecate all the bioinformatics applications?

Yes, with the exception of interactive graphical applications.

=== Do you want to deprecate the conventional workflow languages?

Not entirely. They do offer good scaling support that Morloc cannot yet
match. Some also support GUIs which offer an intuitive and valuable way to
visualize and create workflows from coarse components.

Hybrid solutions are possible. Conventional workflow languages can wrap Morloc
compiled applications and pass Morloc generated data in place of bespoke
bioinformatics formats.


// === How does Morloc handle dependencies?
//
// The tooling around Morloc is still immature. I do not have a dedicated
// dependency resolver yet. So what follows is speculative. That said, I think one
// of the keys to manageable dependency management is simplicity. Rather than
// treating massive applications as units, in Morloc we can treat small blocks of
// (usually) pure functional code as units. These small blocks can be nearly
// ageless and may have few dependencies. The more volatile code, such as database
// interface code, can be isolated from the more stable algorithmic code. Large
// monolithic applications rot quickly because they couple too many concerns and if
// any part of the system fails, the entire application falls.


=== Does Morloc allow function-specific environments?

No, unlike workflow managers such as Snakemake and Nextflow, Morloc does not
offer function-specific environments. This is a deliberate design choice.

Dependency resolution is a hard and heavily researched problem. The general goal
of dependency solvers is to find *one* set of dependencies that satisfies the
*entire* program. The bioinformatics community often gives up on finding unified
environments and instead runs each function in its independent environment. With
every function running in its own container, all dependency issues are
encapsulated and all functions may be executed from one manager. But this comes
at a heavy cost. Each application must be wrapped in a script, the script must
be executed via an expensive system call into the container, and data must be
serialized and sent to the container. This approach is reasonable for workflows
with a small number of heavy components. But from a programming language
perspective, wrapping every function call in its own environment is inefficient
and opaque.

Morloc is designed not to hide problems in boxes, but rather to solve the root
problem. Conventional workflow languages attempt to simplify workflows design by
layering frameworks over the functions. The Morloc approach is the exact
opposite. First delete everything unnecessary from all applications and lift
their light algorithmic cores into clean, well-typed libraries. Then build
upwards through composition of these pure functions --- and judicious use of
impure ones --- to create efficient, reliable, and composable tools.

Now, if you really do need to run something in a container, you can just make a
function that wraps a call to a container and then use it just as you would any
other function. You could even write a wrapper function that takes a record with
all the metadata needed for a conda environment and execute its function within
that environment. We can do this through libraries, so there is no need to
hardcode this pattern into the Morloc language itself.

The reproducibility of Morloc workflows may be ensured by running the entire
Morloc program in an environment or container, with a single set of
dependencies. The specific Morloc compiler version can be specified and modules
may be imported using their git hashes. This is done in the current Morloc
examples (see the Dockerfile in the workflow-comparisons folder of
https://github.com/morloc-project/examples).

// === What _is_ a function?
//
// Good question. A function is a mapping from inputs to an output. These may be
// trivial, like the `snd` function that returns the second element in a tuple. Or
// they might be massive heuristic algorithms, such as SAT solvers or sequence
// alignment algorithms. Or they could be trained models.

// === Types are too hard, are they really worth it?
//
// Most people who dislike types come from languages where type annotations are
// somewhat tedius -- like Java and {cpp}.
//
// - **Types make implicit models explicit:** Every time you work with data, you
//   build a mental model of its structure and constraints. Type systems let you
//   formalize and communicate these models directly in code.
//
// - **Types prevent errors:** By checking that data matches expected forms, type
//   systems catch mistakes early, reducing bugs and runtime failures.
//
// - **Types serve as documentation:** Type annotations describe what data is
//   expected and produced, making code easier to understand, maintain, and
//   refactor.
//
// - **Types clarify data flow:** They make the movement and transformation of data
//   visible, helping you reason about complex systems and avoid hidden
//   assumptions.
//
// - **The model always exists:** You can either rely on memory and ad hoc
//   conventions, or write types and let the computer enforce and share your
//   model—reducing the cognitive load and risk of miscommunication.
//
// - **Type systems are a practical tool:** The trend toward stronger type systems
//   is driven by the need to manage complexity, not just academic rigor. They are
//   often easier to learn and adopt than many other formal systems used in
//   scientific computing.


=== What about object-oriented programming?

An "object" is a somewhat loaded term in the programming world. As far as
Morloc is concerned, an object is a thing that contains data and possibly
other unknown stuff, such as hidden fields and methods. All types in Morloc
have must forms that are transferable between languages. Methods do not easily
transfer; at least they cannot be written to Morloc binary. However, it is
possible to convey class-like APIs through typeclasses. Hidden fields are more
challenging since, by design, they are not accessible. So objects cannot
generally be directly represented in the Morloc ecosystem.

Objects that have a clear "plain old data" representation can be handled by
Morloc. These objects, and their component types, must have no vital hidden
data, no vital state, and no required methods. Examples of these are all the
basic Python types (`int`, `float`, `list`, `dict`, etc) and many {cpp} types such
as the standard vector and tuple types. When these objects are passed between
languages, they are reduced to their pure data.

=== Why is it named after Morlocks, weren't they, like, bad?

While the Morlocks of Wellian fame are best known for their culinary
preferences, I maintain that Wells misrepresented them. And even if they were as
Wells claimed, we should remember that we are not so kind to our own
Eloi. Setting all that aside, the Morlocks worked below to maintain the machines
that simplified life above. It was for this quality that Morloc adapts their
name.

=== Wait! I have more questions!

Great! Look me up on Discord (link below) and we can chat.
