
=== What about object-oriented programming?

An "object" is a somewhat loaded term in the programming world. As far as
`morloc` is concerned, an object is a thing that contains data and possibly
other unknown stuff, such as hidden fields and methods. All types in `morloc`
have must forms that are transferable between languages. Methods do not easily
transfer; at least they cannot be written to `morloc` binary. However, it is
possible to convey class-like APIs through typeclasses. Hidden fields are more
challenging since, by design, they are not accessible. So objects cannot
generally be directly represented in the `morloc` ecosystem.

Objects that have a clear "plain old data" representation can be handled by
`morloc`. These objects, and their component types, must have no vital hidden
data, no vital state, and no required methods. Examples of these are all the
basic Python types (`int`, `float`, `list`, `dict`, etc) and many {cpp} types such
as the standard vector and tuple types. When these objects are passed between
languages, they are reduced to their pure data.

=== Is this just a bioinformatics workflow language?

No. The `morloc` paper https://www.zebulun-arendsee.com/images/morloc-paper-001.pdf[pre-released
here], is focused
on bioinformatics applications. As discussed at length in the paper, `morloc`
addresses systematic flaws in the traditional approaches to building
bioinformatics workflows. Given the need, and also given my personal background,
it is a good place to start. However, `morloc` can be more broadly applied to
any functional problem.
