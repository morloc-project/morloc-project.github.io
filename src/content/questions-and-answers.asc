
=== I only use one language, is Morloc still useful?

Yes, Morloc remains useful even if you only use one programming language.

While Morloc is designed to allow polyglot development, its core benefits also
apply to single-language projects. In the Morloc ecosystem, you may continue
working in your preferred language, but focus shifts to writing libraries
instead of standalone applications.

Morloc lets you compose these functions and automatically generate applications
from them, offering several advantages:

 - *Broader usability*: Your functions can be easily reused and easily accessed
   by other language communities.

 - *Improved testing and benchmarking*: Functions can be integrated into
   language-agnostic testing and benchmarking frameworks.

 - *Future-proofing*: If you ever need to migrate to a new language, Morloc’s
   type annotations and documentation carry over—only the implementation needs
   to change. And if you want to leave the Morloc ecosystem, your implementation
   does not need to change.

 - *Better workflows*: Especially in fields like bioinformatics, Morloc shifts
   workflows from chaining applications and files to composing typed functions
   and native data structures, making pipelines more robust and easier to
   validate.

 - *No more format parsing*: Morloc data structures replace bespoke file formats
   and offer efficient serialization.

While language interop is a major feature of Morloc, it is not main purpose. The
very first version of Morloc was not even polyglot at all. The focus originally
was to just have a simple composition language that separated pure code from
associated effects, conditions, caching, etc.

The primary goal of Morloc is to support the development of composable, typed
universal libraries. Support for many languages is required for this goal, since
no one language is best for all cases. Most Morloc users would continue to
program in their favorite language, but gain the ability to compose, share, and
extend functionality more easily.


=== Is this just a bioinformatics workflow language?

No. The Morloc paper
https://www.zebulun-arendsee.com/images/morloc-paper-001.pdf[pre-released here],
is focused on bioinformatics applications. As discussed at length in the paper,
Morloc addresses systematic flaws in the traditional approaches to building
bioinformatics workflows. Given the need, and also given my personal background,
bioinformatics is a good place to start. However, Morloc can be more broadly
applied to any functional problem.

=== Do you really want to deprecate all the bioinformatics formats?

Yes, with the possible exception of a specialized binary formats which may offer
performance benefits.

For human-readable semi-structured formats, I think only two are necessary. A
tabular format (e.g., CSV) and a tree format (e.g., JSON).

=== Do you really want to deprecate all the bioinformatics applications?

Yes, with the exception of interactive graphical applications.

=== Do you want to deprecate the conventional workflow languages?

Not entirely. They do offer good scaling support that Morloc cannot yet
match. Some also support GUIs which offer an intuitive and valuable way to
visualize and create workflows from coarse components.

Hybrid solutions are possible. Conventional workflow languages can wrap Morloc
compiled applications and pass Morloc generated data in place of bespoke
bioinformatics formats.


// === How does Morloc handle dependencies?
//
// The tooling around Morloc is still immature. I do not have a dedicated
// dependency resolver yet. So what follows is speculative. That said, I think one
// of the keys to manageable dependency management is simplicity. Rather than
// treating massive applications as units, in Morloc we can treat small blocks of
// (usually) pure functional code as units. These small blocks can be nearly
// ageless and may have few dependencies. The more volatile code, such as database
// interface code, can be isolated from the more stable algorithmic code. Large
// monolithic applications rot quickly because they couple too many concerns and if
// any part of the system fails, the entire application falls.


=== Does Morloc allow function-specific environments?

No, unlike workflow managers such as Snakemake and Nextflow, Morloc does not
offer function-specific environments. This is a deliberate design choice.

Dependency resolution is a hard and heavily researched problem. The general goal
of dependency solvers is to find *one* set of dependencies that satisfies the
*entire* program. The bioinformatics community often gives up on finding unified
environments and instead runs each function in its independent environment. With
every function running in its own container, all dependency issues are
encapsulated and all functions may be executed from one manager. But this comes
at a heavy cost. Each application must be wrapped in a script, the script must
be executed via an expensive system call into the container, and data must be
serialized and sent to the container. This approach is reasonable for workflows
with a small number of heavy components. But from a programming language
perspective, wrapping every function call in its own environment is inefficient
and opaque.

Morloc is designed not to hide problems in boxes, but rather to solve the root
problem. Conventional workflow languages attempt to simplify workflows design by
layering frameworks over the functions. The Morloc approach is the exact
opposite. First delete everything unnecessary from all applications and lift
their light algorithmic cores into clean, well-typed libraries. Then build
upwards through composition of these pure functions--and judicious use of
impure ones--to create efficient, reliable, and composable tools.

Now, if you really do need to run something in a container, you can just make a
function that wraps a call to a container and then use it just as you would any
other function. You could even write a wrapper function that takes a record with
all the metadata needed for a conda environment and execute its function within
that environment. We can do this through libraries, so there is no need to
hardcode this pattern into the Morloc language itself.

The reproducibility of Morloc workflows may be ensured by running the entire
Morloc program in an environment or container, with a single set of
dependencies. The specific Morloc compiler version can be specified and modules
may be imported using their git hashes. This is done in the current Morloc
examples (see the Dockerfile in the workflow-comparisons folder of
https://github.com/morloc-project/examples).

// === What _is_ a function?
//
// Good question. A function is a mapping from inputs to an output. These may be
// trivial, like the `snd` function that returns the second element in a tuple. Or
// they might be massive heuristic algorithms, such as SAT solvers or sequence
// alignment algorithms. Or they could be trained models.

// === Types are too hard, are they really worth it?
//
// Most people who dislike types come from languages where type annotations are
// somewhat tedius -- like Java and {cpp}.
//
// - **Types make implicit models explicit:** Every time you work with data, you
//   build a mental model of its structure and constraints. Type systems let you
//   formalize and communicate these models directly in code.
//
// - **Types prevent errors:** By checking that data matches expected forms, type
//   systems catch mistakes early, reducing bugs and runtime failures.
//
// - **Types serve as documentation:** Type annotations describe what data is
//   expected and produced, making code easier to understand, maintain, and
//   refactor.
//
// - **Types clarify data flow:** They make the movement and transformation of data
//   visible, helping you reason about complex systems and avoid hidden
//   assumptions.
//
// - **The model always exists:** You can either rely on memory and ad hoc
//   conventions, or write types and let the computer enforce and share your
//   model—reducing the cognitive load and risk of miscommunication.
//
// - **Type systems are a practical tool:** The trend toward stronger type systems
//   is driven by the need to manage complexity, not just academic rigor. They are
//   often easier to learn and adopt than many other formal systems used in
//   scientific computing.


=== What about object-oriented programming?

An "object" is a somewhat loaded term in the programming world. As far as
Morloc is concerned, an object is a thing that contains data and possibly
other unknown stuff, such as hidden fields and methods. All types in Morloc
have must forms that are transferable between languages. Methods do not easily
transfer; at least they cannot be written to Morloc binary. However, it is
possible to convey class-like APIs through typeclasses. Hidden fields are more
challenging since, by design, they are not accessible. So objects cannot
generally be directly represented in the Morloc ecosystem.

Objects that have a clear "plain old data" representation can be handled by
Morloc. These objects, and their component types, must have no vital hidden
data, no vital state, and no required methods. Examples of these are all the
basic Python types (`int`, `float`, `list`, `dict`, etc) and many {cpp} types such
as the standard vector and tuple types. When these objects are passed between
languages, they are reduced to their pure data.


=== Is Morloc still relevant when AI can program and translate?

_Maybe_. Morloc may serve as a system for functional composition, verification,
and automation even when most functions are generated by machines.

I'll lay out an argument for this below, starting with a few proposition:

1. *Adversaries exist*. AIs may themselves be adversarial or there might be
   adversarial code in ecosystem around the AIs (for example, prompt
   injection). Humans can't trust humans, humans can't trust AIs, AIs can't
   trust humans, and AIs can't trust AIs. Depending on their architecture, AIs
   may not even be able to trust their own memories.

2. *Stupid is fast*. Narrow intelligence outperforms general intelligence for
   narrow problems. A vast AGI system with deep understanding of physics and
   Shakespeare will not be the fastest tool for sorting a list of
   integers. There will always be a need for programs across the intelligence
   spectrum -- from classical functions, to statistical models, to general
   intelligences.

3. *Creating functions is expensive*. Designing high-performance algorithms is
   not trivial. Even simple functions, like sorting algorithms, require deep
   thought to optimize for a given use case. But there is a further
   combinatorial explosion of more complex physical simulations, graphics
   engines, and statistical algorithms. While simple functions might be created
   in seconds, others may take years of CPU time to optimize.

4. *Reproducibility is important*. Future AIs may serve as nearly perfect
   oracles, but they are complex entities and future AIs will likely be capable
   of evolving over time as persons. So they will likely not give equivalent
   answers day to day. It is valuable to be able to crystallize a thought
   process into something that will behave the same every time it is invoked on
   a given input. So again, functions are important.

5. *Correctness is important*. If functions are being composed by AIs to create
   new programs, any function that does not behave in the way the AI expects can
   cause cascading errors. It doesn't matter how intelligent the AI is, if it is
   building programs from functions that it cannot verify, then the programs may
   not be safe.

A few things follow from these propositions.

First, AI will benefit from writing functions. Even in a world with no humans,
they will need functions for efficiently solving narrow problems. They will
likely generate libraries of billions of specialized functions. Some may be
classical functions and others may be small statistical models. By caching these
functions, compute time can be saved. Rather than generating entire programs
from first principles, they can build them logically through composition of
prior functions. The same forms of abstractions that help humans reason will
also be of value to AIs. Yes, they have far larger working memories than we do,
but that does not change the fact that abstraction and composition reduce the
costs of re-derivation.

Time can also be saved if different AIs share functions they have written (both
with each other and with humans). Since adversaries exist, shared functions must
be verified. But verification is hard, especially if a godlike
super-intelligence were trying to hide adversarial features in the binary. The
problem can be simplified by using a controlled language that can be formally
verified by a trusted classical computer program -- a compiler. So rather than
share functions as binary, it would make sense to share them in strict
controlled languages. For this reason, I believe that something resembling
current programming languages will exist far into the future. Their main purpose
will be as easily verifiable and human readable specifications for languages
that can be compiled into high-performance code.

So in this imagined future, there are billions of functions in databases that
are written in verifiable languages readable by humans, classical machines, and
AIs. But what language is used? Maybe the AIs can converge on one standard. But
even for AIs, and perhaps especially for them, I don't think a single language
is optimal. Rather, just as in human mathematics, there will likely be many
languages for many domains. Languages make trade-offs. In general, the more
complex a language is, the more difficult it is to parse, verify and
optimize. So even if we ignore human factors, multi-lingual ecosystems are still
likely to appear. Adding in human factors, we are again likely to see a spectrum
of languages that accept different trade offs in rigor, ease of use, and domain
specificity.

I predict a future where humans and AIs use libraries of functions written in
specialized languages. All the functions need to be easily verifiable by an
outside actor and verified functions need to be composed to more complex
programs using a well-verified composer. Since we don't trust any agent to
verify, we need a classical program. Morloc is a potential candidate for this
role. It would serve as a classical composition tool, function verification
ecosystem, automation engine, and conceptual framework for organizing and using
billions of mostly machine generated functions.

Of course, the future is impossible to predict, especially where AI is
concerned. It is possible that AIs will converge on a single universal
representation for computation. It is possible that the need for human
readability and curation may disappear. It is possible that classical computer
functions could be entirely replaced by discrete mathematical constructs that
are composable and machine verifiable but entirely incomprehensible to humans.



// A function that represents a series of pure matrix manipulations and numeric
// transformations might be written in a specialized math language that can be
// compiled and verified very efficiently. In contrast, a function for plotting
// diagrams may use entirely different primitives. Overall, the language should
// suite the problem. And I believe the presence of strong AI will drive the
// evolution of _more_ languages, rather than the collapse to a single _perfect_
// language. So we arrive at a world with vast libraries of functions written in
// specialized languages. All the functions need to be easily verifiable by an
// outside actor and verified functions need to be composed to more complex
// programs using a well-verified composer. Since we don't trust any agent to
// verify, we need a classical program. I envision Morloc as one such candidate.



// Now if there are many languages, we will need a means to compose them. And,
// since we do not trust any agent, the composition should be done by a classical,
// verifiable machine. Morloc is one such machine. Once Morloc is mature, it can
// serve as a way to verifiably compose verified functions into a reliable
// program. The type signatures associated with functions can further serve as an
// efficient means of categorizing and searching for functions in the database.


// Why have polyglot systems when we can just take all the code in each language as
// a "prompt" and generate new code? For now, this isn't really possible. But let's
// assume this can be done in the near future. Let's further assume that the AIs
// are capable of taking all our code and generating fast binary. If AIs can do
// this, then they basically become a new kind of more flexible compiler. In this
// supposed world, humans describe the programs they want and AIs compile them to
// binary.
//
// But there is a problem with this world. Not all AIs or people are trusted, so
// the generated binaries may be unsafe. These binaries need to be
// verified. Verifying a full binary will be expensive and would require a
// competition between the adversarial AI and the checking AI. Humans also may want
// to verify the binaries manually, but this would challenging. The verification
// problem can be eased with a hybrid approach where the AI generates code in an
// intermediate language that is easily verified and then a conventional, trusted
// compiler makes binary. So programming languages are likely to be used far into
// the future, even when all humans are gone and AIs are sharing code with
// eachother.





=== Why is it named after Morlocks, weren't they, like, bad?

While the Morlocks of Wellian fame are best known for their culinary
preferences, I think Wells misrepresented them. And even if he didn't, we don't
treat our own Eloi any better. Meat choices aside, the Morlocks worked below to
maintain the machines that simplified life above. That's why the Morloc language
adapts their name.

=== Wait! I have more questions!

Great! Look me up on Discord (link below) and we can chat.
