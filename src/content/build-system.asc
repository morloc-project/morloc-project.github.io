
== Build system

=== {cpp}

The morloc line:

`source Cpp from "foo.h" ("foo")`

imports the functions defined in the header "foo.h" into a morloc module where
typesignatures can be added. "foo.h" will be included and is assumed to be in
the working directory. "foo.hpp", "foo.hxx" and "foo.hpp" are also accepted.


The morloc line:

`source Cpp from "foo" ("foo")`

Will search for "foo" will search be as follows:

 1. Find a header file. The file will be one of the following:
    * "./foo.h"
    * "./include/foo.h"
    * "./src/foo.h"
    * "$HOME/.morloc/include/foo.h"
    * "/usr/include/foo.h"
    * "/usr/local/include/foo.h"
 ".h" extension may be replaced with ".hpp", ".hxx" or ".hpp"

 2. Once a header has been found, a shared library named "libfoo.so" will be
 sought. It will be searched for in the locations:
   * "./libfoo.so"
   * "./bin/libfoo.so"
   * "$HOME/.morloc/lib/libfoo.so"
   * "/usr/lib/libfoo.so"
   * "/usr/local/lib/libfoo.so"
 If no shared library is found, then ask for one and die

 3. Compile the morloc 


 

// Internally, `morloc` follows a model similar to Pandoc. Pandoc can convert
// between markup formats (for example HTML, Markdown, LaTeX, and Word). All data
// is stored internally as an abstract syntax tree. To add a new markup format,
// a programmer only needs to add a Reader and Writer that converts the new markup
// format to and from Pandoc's internal format.
//
// From the `morloc` users perspective, a module is a set of `morloc` functions that
// can be used in a `morloc` program. Each function in the module has a type. But
// the actual implementation, which is hidden from the `morloc` user, is a bit
// tricky. There are a couple very different cases:
//
// the imported module is:
//
//  1. a `morloc` script. In this case, we are importing selected compositions
//     written in `morloc`. These `morloc` imports are nodes on a tree.
//
//  2. a single function in language X that uses only core features from X. No
//     external libraries are used. No version info given. It is assumed that the
//     function will work on any version of the language.
//
//  3. a collection of functions in X and imports from X libraries. No version
//     info. In this case, the `morloc` compiler needs to find and install the
//     required libraries. It is assumed that the functions will work with an
//     version of the language or libraries.
//
//  4. #2 or #3, but with version info given. Install the specific version, or the
//     highest version in the range.
//
//  5. import a library from X. This is easier than #2-4, see the note below.
//
// === How to make a `morloc` module
//
// image::linear-algebra-module.png[]
