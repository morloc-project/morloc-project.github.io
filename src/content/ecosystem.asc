=== The universal library

A module may export types, typeclasses, and function signatures but no
implementations. Such a module would be completely language agnostic. A powerful
approach to building libraries in the Morloc ecosystem is to write one module
that defines all types, then $n$ modules for language-specific implementations
that import the type module, and then one module to import and merge all
implementations. This is the approach taken by the `base` module and by other
core libraries.

In the future, when hundreds of languages are supported, and when possibly some
functions may even have many implementations per language, it will be desirable
to have finer control over what functions are used. One solution would be to add
filters to the import statement. Thus the import expressions would be a sort of
query. Alternatively, constraints could be added at the function level, and thus
the entire Morloc script would be a query over the universal library. This would
be especially powerful when imported types are expressed as unknowns to be
inferred by usage.


// === Plains
//
// The concept of "plains" is introduced as a way of organizing modules and
// libraries within a polyglot language ecosystem, not by technical categories or
// subject matter, but by distinct design philosophies and trust criteria. Instead
// of traditional repositories based on domains (like "bioinformatics"), plains are
// more akin to namespaces or segments representing different philosophies about
// code quality, review rigor, safety, and even creativity or adversarial
// intent. Examples given include "unstable" (for newly uploaded, unvetted
// modules), "safe" (manually verified with good test suites), "true" (formally
// verified code, likely only mathematical), "prod" (performance- and
// safety-oriented), "comp" (competitive programming, lax on safety), "red"
// (adversarial, for intentionally breaking bots), "weird" (esoteric/experimental),
// and more. Each plain sets its entry requirements and review levels, and the idea
// is explicitly to allow different "cultures" and standards to coexist and
// self-organize.
//
// For module onboarding, authors would register their modules, ideally proving
// ownership (e.g., via a GitHub handshake). The site's AI (nicknamed Weena) would
// then vet the code, and modules would first appear in the "unstable" plain (named
// under "unstable.username.module"). Module authors could then seek admission to
// stricter or thematically appropriate plains, which would involve processes
// defined individually by each plain (peer review, automated checks, signatures,
// etc.), much like promotions or levels in a game. Modules can live in multiple
// plains simultaneously, reflecting different evaluations by different
// communities.
//
// The architecture caps the number of plains (e.g., 2¹⁶, specified in a 16-bit
// field), partly to enable compile-time enforcement of plain-segregation
// rules—such as required module isolation in the strictest plains. Community
// members can propose new plains, but some level of consensus or support is
// required before creation, to avoid proliferation and confusion.
//
// Another orthogonal axis to plains is programming language: modules can be
// implemented in any language, with some plains (like "true") restricting which
// languages are allowed. This allows for both cohesion (through shared interfaces
// and conventions) and variation (modules defined in multiple languages or just
// one), especially in the core libraries that provide widely used types and
// functions ("Prelude" modules, as in Haskell). Overall, this system formalizes
// the currently ad hoc cultural boundaries seen in package repositories for
// languages like R and Python, making them explicit, modular, and
// self-maintaining.


=== Plains of libraries

IMPORTANT: The infrastructure for "plains" is not yet constructed, so the following is speculative

The concept of "plains" is central to the future organization of Morloc and is
one of the primary reasons that I created it. A *plain* is like a namespace for
a community's modules--but instead of organizing by category or programming
language, modules in a plain share a common philosophy about quality,
trustworthiness, software design and the review process.


Currently, the universe of functions is separated first by language and then by subject
area. Morloc, being polyglot, allows the first mode of separation to be lifted,
so language does not need to separate communities. Instead, communities can
organize around *values*. 

 - **Levels of review & trust:** Code may be wild and experimental; tightly reviewed and trusted in production; or formally verified.
 - **Design philosophy:** Groups may prioritize safety, raw performance, or elegance by some metric.
 - **Use case:** Plains may focus on production, pedagogy, competition or experimentation. 

Making these differences explicit (and easy to navigate) lets the community set and find their own standards.

**Real-World Analogs**

Within the R community, you could define three plains:

- **CRAN:** Has stringent requirements for acceptance and manual application process focused on adherence to well-defined (mostly automated) requirements
- **rOpenSci:** Focuses on a formal peer review process that considers motivation, documentation, and good software design
- **GitHub:** Wild west. Anything goes.

You could probably find more "plains" in R, but these three capture the idea of
what a plain is. It is a design philosophy and set of protocols that define
admission.

**Possible examples of Morloc plains**

- **unstable**: For newly submitted or unvetted modules, e.g., loaded straight from GitHub.
- **safe**: Modules that passed manual review, rigorous automated tests, and have strong test suites.
- **true**: For formally verified code, strict on what languages are allowed (e.g., dependently typed languages).
- **prod**: For modules ready for production, combining safety and performance.
- **comp**: Modules suited for competitive programming; all performance, no safety checks or focus on software design principles.
- **red**: Adversarial modules--written to give the Morloc bot problems. High fun, high risk! Probably don't want to import these.
- **weird**: Esoteric code. For silly implementations that abuse languages in fun ways.
- **demo**: Prototypes, examples, and proof-of-concept modules. More pedogogical than practical.

Plains aren’t rigid categories, but cultures: each has its own ground rules,
review process, and ideas about what makes code "good". Anyone can propose a new
plain, but we don’t want too many; a bit of consensus is required before adding
one.

**How Does a Module Join a Plain?**

Again, the architecture is in development. But here is the basic process:

1. **Register:** Authors register their module (e.g., import code from GitHub and authenticate).
2. **AI Vetting:** Our AI (Weena) checks code for basic standards.
3. **Acceptance:** After being accepted, the module defaults to the `unstable` plain.
4. **Level Up:** Module authors can then apply to join other plains. Getting accepted depends on the plain’s review process (could be peer review, automated testing, thumbs up from community members, or nothing at all).
5. **Multiple Plains:** Modules can exist in multiple plains at once--different communities may trust the same code for different reasons.

This process will eventually be mediated on the website morloc.io (under construction).

Overall, plains help you find code that matches your needs and values--whether
you want ultimate safety, bleeding-edge performance, or just something weird
that might surprise you. They also provide community and allow relations between
different codebases to be specified.
