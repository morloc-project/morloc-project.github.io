
=== Packet protocols

A Morloc program compiles into a single "nexus" file and a "pool" file for each
language. The nexus program accepts user input, dispatches to the pools, and
formats results. The pools "pool" all functions from each specific
language. When a command is sent to the nexus, it initializes the pools as
background processes, pool daemons. Then the nexus sends the given information
to the pool daemon that contains the top function in the composition.

Data is passed between the nexus and between daemons using a combination of UNIX
domain socket messages and shared memory storage.

Packets follow a binary protocol that is defined in the `data/morloc.h` file in
the main Morloc repository.

Each packet has a 32-byte with the following fields:

.Packet header specification
[cols="2, 2, 1, 10"]
|===
| Field     | Type         | Width | Description

| `magic`   | unsigned int | 4     | Morloc-specific constant: 6D F8 07 07 (mo-ding-ding) 
| `plain`   | unsigned int | 2     | Morloc "plain" (see below for description)
| `version` | unsigned int | 2     | Packet version
| `flavor`  | unsigned int | 2     | Metadata convention
| `mode`    | unsigned int | 2     | Evaluation mode (e.g., debug or verbose)
| `command` | 8-byte union | 8     | Packet description
| `offset`  | unsigned int | 4     | length of metadata block
| `length`  | unsigned int | 8     | length of the data payload
|===

[mermaid]
....
packet
    +4: "magic"
    +2: "plain"
    +2: "version"
    +2: "flavor"
    +2: "mode"
    +8: "command"
    +4: "offset"
    +8: "length"
....


The Morloc plain specifies membership in a special set of Morloc libraries that
follows a certain set of conventions of requirements. This is broader than a
namespace. An example of a plain would be a "Safe" plain where all functions are
verified in some fashion. In this case, it may be required that any packets that
are read into a program should also have been created by a member of the Safe
plain. Handling for plains is not yet implemented.

The `command` specifies the type of packet. There are currently three: `data`,
`call`, and `ping`.

A data packet represents data and how it is stored. These packets have three
main uses. First, they are used to store arguments that are passed between the
nexus and pool daemons. Second, they are transport data within the pools that
has not been transformed into native structures. This allows data to be
efficiently transferred between languages without being "naturalized" unless
needed. Third, data packets may be written by the nexus as the output of a
program. 

.Data packet command field specification
[cols="2, 2, 1, 10"]
|===
| Field          | Type    | Width | Description

| `type`         | char    | 1     | Constant 0 - for "data" type
| `source`       | char    | 1     | Source type (e.g., file, message, pointer to shared memory)
| `format`       | char    | 1     | Data format (e.g., JSON, MessagePack, Text, Voidstar)
| `compresssion` | char    | 1     | Compression algorithm
| `encryption`   | char    | 1     | Encryption algorithm
| `status`       | char    | 1     | Pass or fail status
| `padding`      | char[2] | 2     | zero-padding
|===

The `source` field states "where" the data is. It might be stored literally in
the packet itself. It might be stored in a file, in which case the packet stores
only the filename. It might be stored in the shared memory volumes, in which
case the packet stores a relative pointer to the memory location. The `format`
field stores the data type. It might be JSON data, MessagePack data, literal
text (e.g., for error messages), or the Morloc binary (which I sometimes call
Voidstar). The `compression` and `encryption` fields are not currently used. But
in the future they will be needed to support packet-specific
compression/encryption of payloads. The `status` field represents whether the
producing computation failed. If so, then the packet may contain an error
message.

A call packet is sent from the nexus to a pool daemon or between daemons (for
foreign calls). These packets specify the function to call and contain a
contiguous list of data packets representing positional arguments as their
payload.

.Call packet command field specification
[cols="2, 2, 1, 10"]
|===
| Field        | Type         | Width | Description
                              
| `type`       | char         | 1     | Constant 1 - for "call" type
| `entrypoint` | char         | 1     | stores if the call is local or remote (or something else)
| `padding`    | char[2]      | 2     | zero-padding
| `midx`       | unsigned int | 4     | ID for the function to call in the pool daemon 
|===

The `entrypoint` field is currently used when a call packet is sent to a remote
machine for execution.

A ping packet is a header-only packet that is sent to check if some resource
(such as a pool daemon) is up and running. The nexus will ping all pool daemons
until it gets a response before sending them call instructions.

.Ping packet command field specification
[cols="2, 2, 1, 10"]
|===
| Field     | Type    | Width | Description

| `type`    | char    | 1     | Constant 2 - for "ping" type
| `padding` | char[7] | 7     | 0 padding
|===


Metadata is stored in blocks that start with an 8-byte metadata header.

.Metadata block specification
[cols="2, 2, 1, 10"]
|===
| Field          | Type    | Width | Description

| `magic`        | char[3] | 3     | Constant "mmh" string (Morloc Metadata Header)
| `type`         | char    | 1     | Metadata type (e.g., schema string or data hash)
| `size`         | uint    | 4     | Data format (e.g., JSON, MessagePack, Text, Voidstar)
|===

Currently Morloc uses the metadata section to store data type schemas and to
cache data hashes. In the future, these sections could be extended to store
provenance data, benchmark data, environment info, runtime dags, or even raw
inputs and code. The nexus can write data packets as a final output.

// === Architecture
//
// [mermaid]
// ....
// sequenceDiagram
//     create actor User
//     create participant Nexus
//     User->>Nexus: make
//     User->>Nexus: Submit CLI command
//     create participant PyPool
//     Nexus->>PyPool: start daemon
//     Nexus->>PyPool: ping
//     PyPool->>Nexus: pong
//     create participant CppPool
//     Nexus->>CppPool: ping
//     CppPool->>Nexus: pong
// ....
//
// === Compiler Design
//
// This section is probably only of interest to those who want to modify compiler
// itself. Here I will attempt to draw the entire program.
//
// This is a sample document demonstrating how to include a Mermaid diagram.
//
//
//
// Mermaid Diagrams for Software Documentation
//
// Basic AsciiDoc Syntax
//
// Embed Mermaid diagrams in AsciiDoc using code blocks:
//
// [mermaid]
// ....
// graph TD
//     A[Start] --> B[Process]
//     B --> C[End]
// ....
//
// Flowcharts - Control Flow & Data Flow
//
// **Perfect for your compiler use case** - showing how data structures transform through compilation phases:
//
// [mermaid]
// ....
// flowchart TD
//     A[Source Code<br/>String] --> B[Lexer]
//     B --> C[Token Stream<br/>List&lt;Token&gt;]
//     C --> D[Parser]
//     D --> E[AST<br/>TreeNode]
//     E --> F[Semantic Analyzer]
//     F --> G[Annotated AST<br/>TypedTreeNode]
//     G --> H[Code Generator]
//     H --> I[Machine Code<br/>ByteArray]
// ....
//
// **Data Pipeline Example:**
//
// [mermaid]
// ....
// flowchart LR
//     A[Raw Data] --> B[Validation]
//     B --> C[Transformation]
//     C --> D[Aggregation]
//     D --> E[Output]
//
//     subgraph "Data Structures"
//         F[CSV Records]
//         G[Validated Objects]
//         H[Normalized Data]
//         I[Summary Stats]
//     end
// ....
//
// State Diagrams - System States & Transitions
//
// **Great for showing object lifecycle or protocol states:**
//
// [mermaid]
// ....
// stateDiagram-v2
//     [*] --> Uninitialized
//     Uninitialized --> Loading : initialize()
//     Loading --> Ready : load_complete()
//     Ready --> Processing : process()
//     Processing --> Ready : process_complete()
//     Ready --> Error : error_occurred()
//     Error --> Ready : reset()
//     Ready --> [*] : shutdown()
// ....


