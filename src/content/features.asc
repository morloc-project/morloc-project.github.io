    
=== Basic data types

Here we'll cover the basic `morloc` data types that directly map to `morloc`
binary. For these types, there are fairly direct representations in most
languages. The basic types are listed below:

[cols="2, 1, 2, 1"]
|===
| Type | Domain | Schema | Width (bytes)

| Unit | `()` | z | 1
| Bool | `True` \| `False` | b | 1
| UInt8 | latexmath:[[0,2^{8})] | u1 | 1
| UInt16 | latexmath:[[0,2^{16})] | u2 | 2
| UInt32 | latexmath:[[0,2^{32})] | u4 | 4
| UInt64 | latexmath:[[0,2^{64})] | u8 | 8
| Int8 | latexmath:[[-2^{7},2^{7})] | i1 | 1
| Int16 | latexmath:[[-2^{15},2^{15})] | i2 | 2
| Int32 | latexmath:[[-2^{31},2^{31})] | i4 | 3
| Int64 | latexmath:[[-2^{63},2^{63})] | i8 | 4
| Float32 | IEEE float | f4 | 4
| Float64 | IEEE double | f8 | 8
| List x | het lists | a{x} | latexmath:[16 + n \Vert a \Vert ]
| Tuple2 x1 x2 | 2-ples | t2{x1}{x2} | latexmath:[\Vert a \Vert + \Vert b \Vert]
| TupleX latexmath:[\ t_i\ ...\ t_k] | k-ples | latexmath:[tkt_1\ ...\ t_k] | latexmath:[\sum_i^k \Vert t_i \Vert]
| latexmath:[\{ f_1 :: t_1,\ ... \ , f_k :: t_k \}] | records | latexmath:[mk \Vert f_1 \Vert f_1 t_1\ ...\ \Vert f_k \Vert f_k t_k ] | latexmath:[\sum_i^k \Vert t_i \Vert]
|===

All basic types may be written to a schema that is used internally to direct
conversions between `morloc` binary and native basic types. The schema values
are shown in the table above. For example, the type `[(Bool, [Int8])]` would
have the schema `at2bai1`. You will not usually have to worry about these
schemas, since they are mostly used internally. They are worth knowing, though,
since they appear in low-level tests, generated source code, and binary data
packets (which are fun reading).

A `record` is a named, heterogenous list such as a `struct` in C, a `dict` in
Python, or a `list` in R. The type of the record exactly describes the data
stored in the record (in contrast to parameterized types like `[a]` or `Map a b`).

A `table` is like a record where all types are replaced by lists of that type.
But `table` is not just syntactic sugar for a record of lists, the `table`
annotation is passed with the record through the compiler all the way to the
translator, where the language-specific serialization functions may have
special handling for tables.

Both are defined in similar ways.

[source, morloc]
----
record (PersonRec a) = PersonRec {name :: Str, age :: Int}
record Cpp => PersonRec a = "MyObj"

table (PersonTbl a) = PersonObj {name :: Str, age :: Int}
table R => PersonTbl a = "data.frame"
table Cpp => PersonTbl a = "struct"
----

=== Functions

Function definition follows Haskell syntax.

[source, morloc]
----
foo x = g (f x)
----

`morloc` supports the `.` operator for composition, so we can re-write `foo` as:

[source, morloc]
----
foo = g . f
----

`morloc` supports partial application of arguments.

For example, to multiply every element in a list by 2, we can write:

[source, morloc]
----
multiplyByTwo = map (mul 2.0)
----


=== Type signatures and type functions

General type declarations also follow Haskell syntax:

[source, morloc]
----
take a :: Int -> List a -> List a
----

Where `a` is a generic type variable. `morloc` supports `[a]` as sugar for `List a`.

The general types may be translated to concrete types by fully evaluating them
with a set of language-specific type functions. For example:


[source, morloc]
----
type Cpp => Int = "int"
type Py => Int = "int"

type Cpp => List a = "std::vector<$1>" a
type Py => List a = "list" a
----

Language-specific types are always quoted since they may contain syntax that is
illegal in the `morloc` language.

Type functions may also map between general types.

[source, morloc]
----
type (Pairlist a b) = [(a,b)]
----

Why do I call them type functions, rather than just aliases? There is a lot more
that can be done with these functions that I am just beginning to explore.


=== Sourcing functions

Sourcing a function from a foreign language is done as follows:

[source,haskell]
----
source Cpp from "foo.h" ("mlc_foo" as foo) 

foo :: A -> B
----

Here we state that we are importing the function `mlc_foo` from the `C++` source
file `foo.h` and calling it `foo`. We then give it a general type signature.

Currently `morloc` treats language-specific functions as black boxes. The
compiler does not parse the `C++` code to insure the type the programmer wrote
is correct. Checking a `morloc` general type for a function against the source
code may often be possible with conventional static analysis. LLMs are also
quite effective at both inferring `morloc` types from source code and checking
types against source code.

For statically typed languages like `C++`, incorrectly typed functions will
usually be caught by the foreign language compiler.


=== Modules

A module includes all the code defined under the `import <module_name>`
statement. It can be imported with the `import` command.

The following module defines the constant `x` and exports it.

[source, morloc]
----
module foo (x)
x = 42
----

Another module can import `Foo`:

[source]
----
import Foo (x)

...
----

A term may be imported from multiple modules. For example: 

[source, morloc]
----
module main (add)
import cppbase (add)
import pybase (add)
import rbase (add)
----

This module imports that `C++`, Python, and R `add` functions and exports all
of them. Modules that import `add` will import three different versions of the
function. The compiler will choose which to use.

=== Ad hoc polymorphism (overloading and type classes)

`morloc` supports ad hoc polymorphism, where instances of a function may be
defined for multiple types.

Here is an example of a simple type classe, `Sizeable`, which represents objects
that have be mapped to an integer that conveys the notion of size:

[source, morloc]
----
module size (add)

class Sizeable a where
  size a :: a -> Int
----

Instances of `Sizeable` may be defined in this module or in modules that import
this module. For example:

[source, morloc]
----
module foo *

type Cpp => List a = "std::vector<$1>" a 
type Py => List a = "list" a 

type Cpp => Str = "std::string" 
type Py => Str = "str" 

instance Sizeable [a] where
  source Cpp "foo.hpp" ("size" as size)
  source Py ("len" as size)

instance Sizeable Str where
  source Cpp "foo.hpp" ("size" as size)
  source Py ("len" as size)
----

Where in `C++`, the generic function `size` returns length for any `C++` size
with a `size` method. For Python, the builtin `len` can be directly used.

`morloc` also supports multiple parameter typeclasses, such as in the `Packable`
typeclass below:

[source, morloc]
----
class Packable a b where
  pack a b :: a -> b
  unpack a b :: b -> a
----

This specific typeclass is special in the `morloc` ecosystem since it handles
the simplification of complex types before serialization. Instances may overlap
and the most specific one will be selected. `Packable` may have instances such
as the following:

[source, morloc]
----
instance Packable [a] (Queue a) where
  ...

instance Packable [a] (Set a) where
  ...

instance Packable [(a,b)] (Map a b) where
  ...

instance Packable [(Int,b)] (Map Int b) where
  ...
----


=== Core libraries

Each supported language has a base library that roughly corresponds to the
Haskell prelude. They have functions for mapping over lists, working with
strings, etc. They also contain standard type aliases for each language. For
example, `type Cpp => Int = "std::string"`.

The root of the current library is the `conventions` module that defines the
core type classes and the type signatures for the core functions. The
`conventions` library does not, however, load any foreign source code, so it is
entirely language agnostic.

Next each language has their own base module -- such as `pybase`, `rbase`, and
`cppbase` -- that import `conventions` and include the implementations for all
(or some) of the defined functions and typeclasses.

Finally, a `base` module imports all of the language-specific bases. Currently,
there are only three supported languages, so importing all their base modules is
not impractical. In the future, more selective approaches may be used.
