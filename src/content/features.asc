// Here we import a function named `mlc_foo` in the {cpp} source
// file `foo.h` and we give it the Morloc name `foo`. The function name in the
// foreign language may not be legal in Morloc, so quotations are
// required.
//
// All sourced functions require a type signature that describes their _general
// type_. This is required for type checking and downstream code generation.
//
// Currently Morloc treats language-specific functions as black boxes. The compiler
// does not parse the {cpp} code to insure the type the programmer wrote is
// correct. Checking a Morloc general type for a function against the source code
// may be possible with conventional static analysis. LLMs are also effective at
// both inferring Morloc types from source code and checking types against source
// code.
//
// For statically typed languages like {cpp}, incorrectly typed functions should be
// caught by the foreign language compiler. Also, when data is passed between
// languages, loaded into Morloc, or written, it is checked against the expected
// type schemas at runtime.


=== Source function from foreign languages

In Morloc, you can import functions from many languages and compose them under
a common type system. The syntax for importing functions from source files is as
follows:

[source, morloc]
----
source Cpp from "foo.hpp" ("map", "sum", "snd")
source Py from "foo.py" ("map", "sum", "snd")
----

This brings the functions `map`, `sum`, and `snd` into scope in the Morloc
script. Each of these functions must be defined in the {cpp} and Python
scripts. For Python, since `map` and `sum` are builtins, only `snd` needs to be
defined. So the `foo.py` function only requires the following two lines:

[source, python]
----
def snd(pair):
    return pair
----

The {cpp} file, `foo.hpp`, may be implemented as a simple header file with generic
implementations of the three required functions.

[source, c++]
----
#pragma once
#include <vector>
#include <tuple>

// map :: (a -> b) -> [a] -> [b]
template <typename A, typename B, typename F>
std::vector<B> map(F f, const std::vector<A>& xs) {
    std::vector<B> result;
    result.reserve(xs.size());
    for (const auto& x : xs) {
        result.push_back(f(x));
    }
    return result;
}

// snd :: (a, b) -> b
template <typename A, typename B>
B snd(const std::tuple<A, B>& p) {
    return std::get<1>(p);
}

// sum :: [a] -> a
template <typename A>
A sum(const std::vector<A>& xs) {
    A total = A{0};
    for (const auto& x : xs) {
        total += x;
    }
    return total;
}
----

Note that these implementations are completely independent of Morloc -- they
have no special constraints, they operate on perfectly normal native data
structures, and their usage is not limited to the Morloc ecosystem. The
Morloc compiler is responsible for mapping data between the languages. But to
do this, Morloc needs a little information about the function types. This is
provided by the general type signatures, like so:

[source, morloc]
----
map a b :: (a -> b) -> [a] -> [b]
snd a b :: (a, b) -> b
sum :: [Real] -> Real
----

The syntax for these type signatures is inspired by Haskell, with the exception
that generic terms (`a` and `b` here) must be declared on the left. Square
brackets represent homogenous lists and parenthesized, comma-separated values
represent tuples, and arrows represent functions. In the `map` type, `(a -> b)`
is a function from generic value `a` to generic value `b`;  `[a]` is the input
list of initial values; `[b]` is the output list of transformed values.

Removing the syntactic sugar for lists and tuples, the signatures may be written
as:

[source, morloc]
----
map a b :: (a -> b) -> List a -> List b
snd a b :: Tuple2 a b -> b
sum :: List Real -> Real
----

These signatures provide the _general types_ of the functions. But one general
type may map to multiple _native_, language-specific types. So we need to
provide an explicit mapping from general to native types.

[source, morloc]
----
type Cpp => List a = "std::vector<$1>" a
type Cpp => Tuple2 a b = "std::tuple<$1,$2>" a b
type Cpp => Real = "double"
type Py => List a = "list" a
type Py => Tuple2 a b = "tuple" a b
type Py => Real = "float"
----

These type functions guide the synthesis of native types from general
types. Take the {cpp} mapping for `List a` as an example. The basic {cpp} list type
is `vector` from the standard template library. After the Morloc typechecker
has solved for the type of the generic parameter `a`, and recursively converted
it to {cpp}, its type will be substituted for `$1`. So if `a` is inferred to be
a `Real`, it will map to the {cpp} `double`, and then be substituted into the list
type yielding `std::vector<double>`. This type will be used in the generated {cpp}
code.



=== Functions

Functions are defined with arguments seperated by whitespace:

[source, morloc]
----
foo x = g (f x)
----

Here `foo` is the Morloc function name and `x` is its first argument.

Morloc supports the `.` operator for composition, so we can re-write `foo` as:

[source, morloc]
----
foo = g . f
----

Morloc supports partial application of arguments.

For example, to multiply every element in a list by 2, we can write:

[source, morloc]
----
multiplyByTwo = map (mul 2.0)
----


=== Modules

A module includes all the code defined under the `import <module_name>`
statement. It can be imported with the `import` command.

The following module defines the constant `x` and exports it.

[source, morloc]
----
module foo (x)
x = 42
----

Another module can import `Foo`:

[source, morloc]
----
import foo (x)

...
----

A term may be imported from multiple modules. For example:

[source, morloc]
----
module main (add)
import cppbase (add)
import pybase (add)
import rbase (add)
----

This module imports that {cpp}, Python, and R `add` functions and exports all
of them. Modules that import `add` will import three different versions of the
function. The compiler will choose which to use.


=== Docstrings and toolboxes

Morloc has early support for docstrings in comments that propagate to the
generated CLI code.

For example:

[source, morloc]
----
module main (add, sum)

import types

source Py from "main.py" ("add", "sum")

--' Add two floats
add :: Real -> Real -> Real

--' Sum a list of floats
sum :: [Real] -> Real
----

The special comment `--'` introduces a docstring that is attached to the
following type signature and will be propagated through to the code generated by
the backend.

[source, console]
----
$ morloc make main.loc
$ ./neuxs -h
Usage: ./nexus [OPTION]... COMMAND [ARG]...

Nexus Options:
 -h, --help            Print this help message
 -o, --output-file     Print to this file instead of STDOUT
 -f, --output-format   Output format [json|mpk|voidstar]

Exported Commands:
  add   Add two floats
          param 1: Real
          param 2: Real
          return: Real
  sum   Sum a list of floats
          param 1: [Real]
          return: Real
----


=== User arguments and outputs

User data is passed to Morloc executables as positional arguments to the
specified function subcommand. The argument may be a literal JSON string or a
filename. For files, the format may be JSON, MessagePack, or Morloc binary (VoidStar)
format. The Morloc nexus first checks for a ".json" extension, if found, the
nexus attempts to parse the file as JSON. Next the nexus checks for a ".mpk" or
".msgpack" extension, and if found it attempts to parse the file as a
MessagePack file. If neither extension is found, it attempts to parse the file
first as Morloc binary, then as MessagePack, and finally as JSON. See the
`parse_cli_data_argument` function in `morloc.h` for details.

Passing literal JSON on the command line can be a little unintuitive since extra
quoting may be required. Here are a few examples:

[source, bash]
----
# The Bash shell removes the outer quotes, so double quoting is required
$ ./nexus foo '"this is a literal string"'

# Single quotes are lists is fine, still need to quote inner strings 
$ ./nexus bar '["asdf", "df"]'

# By default, output is written to JSON format
$ ./nexus baz 1 2 3 > baz.json

# The output can be directly read by a downstream morloc program
$ ./nexus bif baz.json
----

Data may be written to MessagePack or VoidStar via the `-f` argument:

[source, console]
----
$ ./nexus -f voidstar head '[["some","random"],["data"]]' > data.vs
$ ./nexus -f json head data.vs > data.json
$ ./nexus -f mpk reverse data.json > data.mpk
$ ./nexus reverse data.mpk
"some"
----

The VoidStar format is the richest and is the only form that contains the schema
describing the data.

=== Mapping general types to native types

When a function is sourced from a foreign language, Morloc needs to know how
Morloc general types map to the function's native types. This information is
encoded in language-specific type functions. For examples:

[source, morloc]
----
type R => Bool = "logical"
type Py => Bool = "bool"
type Cpp => Bool = "bool"

type R => Int32 = "integer"
type Py => Int32 = "int"
type Cpp => Int32 = "uint32"
----

Language-specific types are always quoted since they may contain syntax that is
illegal in the Morloc language.

A function such as an integer addition function `addi`:

[source, morloc]
----
add :: Int32 -> Int32 -> Int32
----

This can be automatically mapped to a {cpp} function with the prototype `int addi(int x, int y)`.

Containers can be similarly mapped to native types:

[source, morloc]
----
type Py => List a = "list" a
type Cpp => List a = "std::vector<$1>" a
----

The `$1` symbol is used to represent the interpolation of the first parameter
into the native type. So the Morloc type `List Int32` would translate to
`std::vector<uint32>` in {cpp}.


=== Records and tables

IMPORTANT: There is currently a bug in handling of records with complex fields. I'll fix this soon.

Morloc has dedicated support for defining records and tables.

Here is a record example:

[source, morloc]
----
module foo (incAge)

import types (Int, Str)

source R from "foo.R" ("incAge")

record Person = Person
    { name :: Str
    , age :: Int
    }

-- Increment the person's age
incAge :: Person -> Person
----

Where the "foo.R" file contains the function:

[source, r]
----
incAge <- function(person){
    person$age <- person$age + 1
    person
}
----

This may be compiles and run as so:

[source, console]
----
$ morloc make foo.loc
$ ./nexus incAge '{name:"Alice",age:32}'
----

Tables are similar, but all fields are lists of equal length:

[source, morloc]
----
module foo (readPeople, addPeople)

import types (Int, Str)

source R from "people-tables.R"
   ( "read.delim" as readPeople
   , "addPeople")

table People = People
    { name :: Str
    , age :: Int
    }

readPeople :: Filename -> People
addPeople :: [Str] -> [Int] -> People -> People
----

With "people-tables.R" containing:

[source, r]
----
addPeople <- function(names, ages, df){
    rbind(df, data.frame(name = names, age = ages)) 
}
----

This can be compiled and run as so:

[source, bash]
----
# read a tab-delimited file containing person rows
./nexus readPeople data.tab > people.json

# add a row to the table
./nexus addPeople '["Eve"]' '[99]' people.json
----

The record and table types are currently excessively strict. Defining functions
that add or remove fields/columns requires defining entirely new
records/tables. Generic funtions for operations such as removing lists of
columns cannot be defined at all. Future versions of Morloc will have more
flexible tables, but for now most operations should be done in coarser
functions. Alternatively, custom non-parameterized tabular/record types may be
defined.

The case study in the Morloc
https://www.zebulun-arendsee.com/images/morloc-paper-001.pdf[paper] uses a
`JsonObj` type that represents an arbitrarily nested object that serializes
to/from JSON. In Python, it deserializes to a `dict` object; in R, to a `list`
objects; and in C to an `ordered_json` object from from
(https://github.com/nlohmann)[Niels Lohmann's json package]).

A similar approach could be used to define a non-parameterized table type that
serialized to CSV or some binary type (such as Parquet).

These non-parameterized solutions are flexible and easy to use, but lack the
reliability of the typed structures.


=== Type hierarchies

In some cases, there is a single obvious native type for a given Morloc general
type. For example, most languages have exactly only one reasonable way to
represent a boolean. However, other data types have may have many forms. The
Morloc `List` is a simple example. In Python, the `list` type is most often used
for representing ordered lists, however it is inefficient for heavy numeric
problems. In such cases, it is better to use a `numpy` vector. Further, there
are data structures that are isomorphic to lists but that are more efficient for
certain problems, such as stacks and queues.

We can define type hierarchies that represent these relationships.

[source, morloc]
----
-- aliases at the general level
type Stack       a = List a
type LList       a = List a
type ForwardList a = List a
type Deque       a = List a
type Queue       a = List a
type Vector      a = List a


-- define a C++ specialization for each special type
type Cpp => Stack a = "std::stack<$1>" a
type Cpp => LList a = "std::list<$1>" a
type Cpp => ForwardList a = "std::forward_list<$1>" a
type Cpp => Deque a = "std::deque<$1>" a
type Cpp => Queue a = "std::queue<$1>" a
----

Here we equate each of the specialized containers with the general `List`
type. This indicates that they all share the same common form and can all be
converted to the same binary. Then we specify language specific patterns as
desired. When the Morloc compiler seeks a native form for a type, it will
evaluate these type functions by incremental steps. At each step the compiler
first checks to see if there is a direct native mapping for the language, if
none is found, it evaluates the general type function.

Native type annotations are also passed to the language binders, allowing them
to implement specialized behavior for more efficient conversion to binary.


=== One term may have many definitions

Morloc supports what might be called _term polymorphism_. Each
term may have many definitions. For example, the function `mean` has three
definitions below:

[source, morloc]
----
import base (sum, div, size, fold, add)
import types
source Cpp from "mean.hpp" ("mean")
mean :: [Real] -> Real
mean xs = div (sum xs) (size xs)
mean xs = div (fold 0 add xs) (size xs)
----

`mean` is sourced directly from {cpp}, it is defined in terms of the `sum`
function, and it is defined more generally with `sum` written as a fold
operation. The Morloc compiler is responsible for deciding which
implementation to use.

The equals operator in Morloc indicates functional substitutability. When you
say a term is "equal" to something, you are giving the compiler an option for
what may be substituted for the term. The function `mean`, for example, has many
functionally equivalent definitions. They may be in different languages, or they
may be more optimal in different situations.

Now this ability to simply state that two things are the same can be abused. The
following statement is syntactically allowed in Morloc:

[source, morloc]
----
x = 1
x = 2
----

What is `x` after this code is run? It is 1 _or_ 2. The latter definition does
not mask the former, it _appends_ the former. Now in this case, the two values
are certainly not substitutable. Morloc has a simple _value checker_ that will
catch this type of primitive contradition. However, the value checker cannot yet
catch more nuanced errors, such as:

[source, morloc]
----
x = div 1 (add 1 1)
x = div 2 1
----

In this case, the type checker cannot check whithin the implementation of `add`,
so it cannot know that there is a contradiction. For this reason, some care is
needed in making these definitions.


=== Overload terms with typeclasses

In addition to term polymorphism, Morloc offers more traditional ad hoc
polymorphism over types. Here typeclasses may be defined and type-specific
instances may be given. This idea is similar to typeclasses in Haskell, traits
in Rust, interfaces in Java, and concepts in {cpp}.

In the example below, `Addable` and `Foldable` classes are defined and used to
create a polymorphic `sum` function.

[source, morloc]
----
class Addable a where
    zero a :: a
    add a :: a -> a -> a

instance Addable Int where
    source Py "arithmetic.py" ("add")
    source Cpp "arithmetic.hpp" ("add")
    zero = 0

instance Addable Real where
    source Py "arithmetic.py" ("add")
    source Cpp "arithmetic.hpp" ("add")
    zero = 0.0

class Foldable f where
    foldr a b :: (a -> b -> b) -> b -> f a -> b

instance Foldable List where
    source Py "foldable.py" ("foldr")
    source Cpp "foldable.hpp" ("foldr")

sum = foldr add zero
----

The instances may import implementations for many languages.

The native functions may themselves be polymorphic, so the imported
implementations may be repeated across many instances. For example, the Python
`add` may be written as:

[source,python]
----
def add(x, y):
    return x + y
----

And the {cpp} add as:

[source,cpp]
----
template <class A>
A add(A x, A y){
    return x + y;
}
----

Typeclasses work currently, but they are not yet in their final form. They
cannot be directly imported and they are not explicit in type signatures. I
would be happy to hear your thoughts on Morloc typeclasses. Getting them right
is crucial to the grand structure of the future Morloc library.

// === Ad hoc polymorphism (overloading and type classes)
//
// Morloc supports ad hoc polymorphism, where instances of a function may be
// defined for multiple types.
//
// Here is an example of a simple type classe, `Sizeable`, which represents objects
// that have be mapped to an integer that conveys the notion of size:
//
// [source, morloc]
// ----
// module size (add)
//
// class Sizeable a where
//   size a :: a -> Int
// ----
//
// Instances of `Sizeable` may be defined in this module or in modules that import
// this module. For example:
//
// [source, morloc]
// ----
// module foo *
//
// type Cpp => List a = "std::vector<$1>" a
// type Py => List a = "list" a
//
// type Cpp => Str = "std::string"
// type Py => Str = "str"
//
// instance Sizeable [a] where
//   source Cpp "foo.hpp" ("size" as size)
//   source Py ("len" as size)
//
// instance Sizeable Str where
//   source Cpp "foo.hpp" ("size" as size)
//   source Py ("len" as size)
// ----
//
// Where in {cpp}, the generic function `size` returns length for any {cpp} size
// with a `size` method. For Python, the builtin `len` can be directly used.
//
// Morloc also supports multiple parameter typeclasses, such as in the `Packable`
// typeclass below:
//
// [source, morloc]
// ----
// class Packable a b where
//   pack a b :: a -> b
//   unpack a b :: b -> a
// ----
//
// This specific typeclass is special in the Morloc ecosystem since it handles
// the simplification of complex types before serialization. Instances may overlap
// and the most specific one will be selected. `Packable` may have instances such
// as the following:
//
// [source, morloc]
// ----
// instance Packable [a] (Queue a) where
//   ...
//
// instance Packable [a] (Set a) where
//   ...
//
// instance Packable [(a,b)] (Map a b) where
//   ...
//
// instance Packable [(Int,b)] (Map Int b) where
//   ...
// ----




=== Binary forms

Every Morloc general type maps unambiguously to a binary form that consists of
several fixed-width literal types, a list container, and a tuple container. The
literal types include a unit type, a boolean, signed integers (8, 16, 32, and 64
bit), unsigned integers (8, 16, 32, and 64 bit), and IEEE floats (32 and 64 bit). The
list container is represented by a 64-bit size integer and a pointer to an
unboxed vector. The tuple is represented as a set of values in contiguous
memory. These basic types are listed below:

.Morloc primitives
[cols="2, 1, 2, 1"]
|===
| Type | Domain | Schema | Width (bytes)

| Unit | `()` | z | 1
| Bool | `True` \| `False` | b | 1
| UInt8 | latexmath:[[0,2^{8})] | u1 | 1
| UInt16 | latexmath:[[0,2^{16})] | u2 | 2
| UInt32 | latexmath:[[0,2^{32})] | u4 | 4
| UInt64 | latexmath:[[0,2^{64})] | u8 | 8
| Int8 | latexmath:[[-2^{7},2^{7})] | i1 | 1
| Int16 | latexmath:[[-2^{15},2^{15})] | i2 | 2
| Int32 | latexmath:[[-2^{31},2^{31})] | i4 | 3
| Int64 | latexmath:[[-2^{63},2^{63})] | i8 | 4
| Float32 | IEEE float | f4 | 4
| Float64 | IEEE double | f8 | 8
| List x | het lists | a{x} | latexmath:[16 + n \Vert a \Vert ]
| Tuple2 x1 x2 | 2-ples | t2{x1}{x2} | latexmath:[\Vert a \Vert + \Vert b \Vert]
| TupleX latexmath:[\ t_i\ ...\ t_k] | k-ples | latexmath:[tkt_1\ ...\ t_k] | latexmath:[\sum_i^k \Vert t_i \Vert]
| latexmath:[\{ f_1 :: t_1,\ ... \ , f_k :: t_k \}] | records | latexmath:[mk \Vert f_1 \Vert f_1 t_1\ ...\ \Vert f_k \Vert f_k t_k ] | latexmath:[\sum_i^k \Vert t_i \Vert]
|===

All basic types may be written to a schema that is used internally to direct
conversions between Morloc binary and native basic types. The schema values
are shown in the table above. For example, the type `[(Bool, [Int8])]` would
have the schema `at2bai1`. You will not usually have to worry about these
schemas, since they are mostly used internally. They are worth knowing, though,
since they appear in low-level tests, generated source code, and binary data
packets.

Here is an example of how the type `([UInt8], Bool)`, with the value
`([3,4,5],True)`,  might be laid out in memory:

[source]
---
03 00 00 00 00 00 00 00 00 -- first tuple element, specifies list length (little-endian)
30 00 00 00 00 00 00 00 00 -- first tuple element, pointer to list
01 00 00 00 00 00 00 00 00 -- second tuple element, with 0-padding
03 04 05                   -- 8-bit values of 3, 4, and 5
---

Records and tables are represented as tuples. The names for each field are stored only in
the type schemas. Morloc also supports tables, which are just records where
the field types correspond to the column types and where fields are all
equal-length lists. Records and tables may be defined as shown below:

A `record` is a named, heterogenous list such as a `struct` in C, a `dict` in
Python, or a `list` in R. The type of the record exactly describes the data
stored in the record (in contrast to parameterized types like `[a]` or `Map a
b`). They are represented in Morloc binary as tuples, the keys are only stored
in the schemas.

A `table` is like a record where field types represent the column types. But
`table` is not just syntactic sugar for a record of lists, the `table`
annotation is passed with the record through the compiler all the way to the
translator, where the language-specific serialization functions may have special
handling for tables.

[source, morloc]
----
record Person = Person { name :: Str, age :: UInt8 }
table People = People { name :: Str, age :: Int }

alice = { name = "Alice", age = 27 }
students = { name = ["Alice", "Bob"], age = [27, 25] }
----

The Morloc type signatures can be translated to schema strings that may be
parsed by a foundational Morloc C library into a type structure. Every
supported language in the Morloc ecosystem must provide a library that wraps
this Morloc C library and translates to/from Morloc binary given the
Morloc type schema.


=== Defining non-primitive types

Types that are composed entirely of Morloc primitives, lists, tuples, records
and tables may be directly and unambiguously translated to Morloc binary forms
and thus shared between languages. But what about types that do not break down
cleanly into these forms? For example, consider the parameterized `Map k v` type
that represents a collection with keys of generic type `k` and values of generic
type `v`. This type may have many representations, including a list of pairs, a
pair of columns, a binary tree, and a hashmap. In order for Morloc to know how
to convert all `Map` types in all languages to one form, it must know how to
express `Map` type in terms of more primitive types. The user can provide this
information by defining instances of the `Packable` typeclass for `Map`. This
typeclass defines two functions, `pack` and `unpack`, that construct and
deconstruct a complex type.

[source, morloc]
----
class Packable a b where
    pack a b :: a -> b
    unpack a b :: b -> a
----

The `Map` type for Python and {cpp} may be defined as follows:

[source, morloc]
----
type Py => Map key val = "dict" key val
type Cpp => Map key val = "std::map<$1,$2>" key val
instance Packable ([a],[b]) (Map a b) where
    source Cpp from "map-packing.hpp" ("pack", "unpack")
    source Py from "map-packing.py" ("pack", "unpack")
----

The Morloc user never needs to directly apply the `pack` and `unpack`
functions. Rather, these are used by the compiler within the generated code. The
compiler constructs a serialization tree from the general type and from this
trees generates the native code needed to (un)pack types recursively until only
primitive types remain. These may then be directly translated to Morloc binary
using the language-specific binding libraries.

In some cases, the native type may not be as generic as the general type. Or you
may want to add specialized (un)packers. In such cases, you can define more
specialized instances of `Packable`. For example, if the `R` `Map` type is
defined as an `R` list, then keys can only be strings. Any other type should
raise an error. So we can write:

[source, morloc]
----
type R => Map key val = "list" key val
instance Packable ([Str],[b]) (Map Str b) where
source R from "map-packing.R" ("pack", "unpack")
----

Now whenever the key generic type of `Map` is inferred to be anything other than
a string, all R implementations will be pruned.
