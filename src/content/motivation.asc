
`morloc` is designed to unify computational communities. Existing solutions are
only partial fixes and can create isolated islands of interoperability,
restricting the languages and functions researchers use. `morloc` is designed to
give programmers absolute autonomy while preserving interoperability through
a common type system. The type system is the contract between the
programmer and the machine, the guide for interoperability between languages,
and the indexing system for a new universal library, built and curated online
for (and by) programmers and researchers in all domains. Our vision is for a
free universal library that makes all computational tools and knowledge about
their use available to everyone. `morloc` will reduce both duplicated work and
"abandonware", and increase modularity and searchability of functions.

=== Programming is tedious

While documentation, testing, checking, and package and system design are seen
as the tenants of "good programming", I consider them inherently "evil". They
are evil because they contribute nothing intrinsically to the purpose of
programming, which is either to ask a question and get an answer or to animate a
process. From the programmer's point of view, "tedious work" is anything that is
not part of the transformation from inputs to outputs: checking the inputs,
testing and benchmarking, internal infrastructure, package infrastructure,
continuous integration workflows, most documentation, parsing/formatting inputs
and outputs, handling caching, handling runtime environment, and handling
parallelism.

The correctness, readability, usability, and searchability are all intrinsic
goods; tests, documentation and other infrastructure, while they may be paths
to goods, are intrinsically just extra work. In a perfect system, the
programmer would describe the problem and the compiler would handle the
implementation details.


=== Functions cannot be used across languages

A second problem is the complexity of using functions across languages.  This
problem is especially vexing for high-turnover analyses, where there is a
constant flow of wildly different problems, requiring tools from dozens of
fields, and reading data in all manner of forms and formats. One solution is to
program pipelines where each function is wrapped as an executable and then
called from a master language. This is the approach taken by most workflow
managers. However, this suffers from bloated code.

Inter-language interfacing can require some of the most tedious coding
imaginable. Let's say we have two functions, f and g, from two different
languages. To connect them we have to 1) write a wrapper around f that converts
the output of f to a language-agnostic file that g understands (e.g. csv, JSON,
XML), 2) write a wrapper around g that tries to open this file (with read error
handling), 3) convert the raw binary data into the internal form g needs, 4)
write code to assert the input to g is correct, and 5) inform the master program
of any failure. The programmers of f and of g have to agree on two conventions:
a common intermediate formats and a way to pass error.

This barrier between languages causes languages communities to become highly
insular. Every problem has to be reimplemented in every language.  For example,
we have Bioperl, Biopython, Bioconductor +(R)+, Biojava, etc.  Also this places
new languages, with few libraries, at a disadvantage, and thus slows the
evolution of programming.

=== Functions are not searchable

The final problem is that searching for functions is annoyingly difficult.
Within in a specific strongly-typed language, you may be able to search by
function signature. Within dynamic languages you are limited to text searches
against the documentation or unchecked, hand-written type annotations.
Searching for functions across languages is an unsolved (and usually unasked)
question. The best we can do is query Google and hope the terms are written in
the documentation.

While all of this is tedious for humans, it is all but impossible for machines.
We have written trillions of lines of code and millions of functions, but only
humans can use them. We have built elaborate systems for searching data,
powerful algorithms for reasoning on data, specifications and formats for
passing data, but for functions we have nothing. Machines cannot reason about
or use our tools.

